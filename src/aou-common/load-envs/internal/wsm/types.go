// Package wsm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package wsm

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ErrorReport defines model for ErrorReport.
type ErrorReport struct {
	Causes     []string `json:"causes"`
	Message    string   `json:"message"`
	StatusCode int      `json:"statusCode"`
}

// Folder defines model for Folder.
type Folder struct {
	// DisplayName The human readable name of the folder.
	DisplayName string `json:"displayName"`

	// Id Id of a given folder. Unique and immutable within a workspace.
	Id FolderId `json:"id"`

	// ParentFolderId Id of a given folder. Unique and immutable within a workspace.
	ParentFolderId *FolderId `json:"parentFolderId,omitempty"`
}

// FolderId Id of a given folder. Unique and immutable within a workspace.
type FolderId = openapi_types.UUID

// FolderList defines model for FolderList.
type FolderList struct {
	Folders []Folder `json:"folders"`
}

// GcpContext The GCP cloud context associated with a workspace.
type GcpContext struct {
	// ProjectId The ID of the GCP project associated with the workspace.
	ProjectId string `json:"projectId"`
}

// ResourceDescription defines model for ResourceDescription.
type ResourceDescription struct {
	Metadata ResourceMetadata `json:"metadata"`
}

// ResourceId The UUID of the resource.
type ResourceId = openapi_types.UUID

// ResourceLineage defines model for ResourceLineage.
type ResourceLineage = []ResourceLineageEntry

// ResourceLineageEntry Resource lineage entry describing a single clone operation
type ResourceLineageEntry struct {
	// SourceResourceId The UUID of the resource.
	SourceResourceId ResourceId `json:"sourceResourceId"`

	// SourceWorkspaceId The UUID of the workspace
	SourceWorkspaceId WorkspaceId `json:"sourceWorkspaceId"`
}

// ResourceList defines model for ResourceList.
type ResourceList struct {
	// Resources Enumerated list of controlled and referenced resources
	Resources []ResourceDescription `json:"resources"`
}

// ResourceMetadata defines model for ResourceMetadata.
type ResourceMetadata struct {
	// FolderId Id of a given folder. Unique and immutable within a workspace.
	FolderId *FolderId `json:"folderId,omitempty"`

	// ResourceId The UUID of the resource.
	ResourceId      ResourceId       `json:"resourceId"`
	ResourceLineage *ResourceLineage `json:"resourceLineage,omitempty"`
}

// ResourceType Enum containing valid resource types. Used for enumeration
type ResourceType string

// StewardshipType Enum containing valid stewardship types. Used for enumeration
type StewardshipType string

// WorkspaceDescription defines model for WorkspaceDescription.
type WorkspaceDescription struct {
	// GcpContext The GCP cloud context associated with a workspace.
	GcpContext *GcpContext `json:"gcpContext,omitempty"`
}

// WorkspaceId The UUID of the workspace
type WorkspaceId = openapi_types.UUID

// LimitParam defines model for Limit.
type LimitParam = int

// OffsetParam defines model for Offset.
type OffsetParam = int

// ResourceTypeParam Enum containing valid resource types. Used for enumeration
type ResourceTypeParam = ResourceType

// StewardshipTypeParam Enum containing valid stewardship types. Used for enumeration
type StewardshipTypeParam = StewardshipType

// ResolveReferenceParam defines model for ResolveReference.
type ResolveReferenceParam = bool

// WorkspaceIdParam defines model for WorkspaceId.
type WorkspaceIdParam = string

// BadRequest defines model for BadRequest.
type BadRequest = ErrorReport

// NotFound defines model for NotFound.
type NotFound = ErrorReport

// PermissionDenied defines model for PermissionDenied.
type PermissionDenied = ErrorReport

// ServerError defines model for ServerError.
type ServerError = ErrorReport

// EnumerateResourcesParams defines parameters for EnumerateResources.
type EnumerateResourcesParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	OffsetParam *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of items to return. Default 10
	LimitParam *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Resource Filter on a specific resource type
	ResourceTypeParam *ResourceTypeParam `form:"resource,omitempty" json:"resource,omitempty"`

	// Stewardship Filter on a stewardship type
	StewardshipTypeParam *StewardshipTypeParam `form:"stewardship,omitempty" json:"stewardship,omitempty"`

	// ResolveReference Optionally request that referenced resources be resolved against their sources
	ResolveReferenceParam *ResolveReferenceParam `form:"resolveReference,omitempty" json:"resolveReference,omitempty"`
}
